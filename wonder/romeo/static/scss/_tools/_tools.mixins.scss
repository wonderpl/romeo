/**
 * _tools.mixins.scss
 */
// There are a number of default mixins that the framework, and developers
// working with it, can make use of.


// Create a fully formed type style (sizing and vertical rhythm) by passing in a
// single value, e.g.:
//
// .foo {
//     @include inuit-font-size(12px);
// }
//
// This will generate a rem-based font-size with its pixel fallback, as well as
// a unitless line-height which will place the element on your baseline, e.g.:
//
// .foo {
//     font-size: 12px;
//     font-size: 0.75rem;
//     line-height: 2;
// }
//
// If you do not want a line-height automatically, you
// simply pass in your own as a second paramater:
//
// .foo {
//     @include inuit-font-size(12px, 1.5);
// }
//
// This will yield:
//
// .foo {
//     font-size: 12px;
//     font-size: 0.75rem;
//     line-height: 1.5;
// }
//
// This parameter can be any integer, ‘inherit’, or ‘normal’. If you don’t want
// a line-height at all, pass in a second paramater of ‘none’ or ‘false’:
//
// .foo {
//     @include inuit-font-size(12px, none);
// }
//
// This will yield:
//
// .foo {
//     font-size: 12px;
//     font-size: 0.75rem;
// }
@mixin font-size($font-size, $line-height: auto) {
  font-size: $font-size;
  font-size: ($font-size / $base-font-size) * 1rem;

  @if $line-height == auto {
    line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
  }

  @else {

    @if (type-of($line-height) == number or $line-height == inherit or $line-height == normal) {
      line-height: $line-height;
    }

    @elseif ($line-height != none and $line-height != false) {
      @warn "D’oh! ‘#{$line-height}’ is not a valid value for `line-height`."
    }
  }
}


/**
 * Easily add vendor prefixes
 * e.g. `@include vendor(border-radius, 4px);`
 * !NOTE: Autoprefixer now depricates this mixin
 */
@mixin vendor($property, $value...){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
        -ms-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}


/**
 * Easily add vendor prefixed animations
 * e.g. `.foo{ @include vendor(animation, shrink 3s); }`
 * !NOTE: Autoprefixer now depricates this mixin
 */
@mixin keyframe ($animation-name){
  @-webkit-keyframes $animation-name{
    @content;
  }

  @-moz-keyframes $animation-name{
    @content;
  }

  @-ms-keyframes $animation-name{
    @content;
  }

  @-o-keyframes $animation-name{
    @content;
  }

  @keyframes $animation-name{
    @content;
  }
}


/**
 * Easily generate positioning classes
 */
@mixin absolute($args) {
  $offsets: top right bottom left;

  @each $o in $offsets {
    $i: index($args, $o);

    @if $i
    and $i + 1 <= length($args)
    and type-of( nth($args, $i + 1) ) == number {
      #{$o}: nth($args, $i + 1);
    }
  }
}

@mixin _position($position, $args) { position: $position; }

@mixin absolute($args) { @include position(absolute, $args); }
@mixin fixed($args)    { @include position(fixed, $args); }
@mixin relative($args) { @include position(relative, $args); }